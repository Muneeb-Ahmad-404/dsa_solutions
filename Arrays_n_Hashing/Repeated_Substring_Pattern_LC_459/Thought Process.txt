Repeated_Substring_Pattern_LC_459
we are provided with a string and we need to check if the string can be made 
using a part of the substring multiple times.
like if a group of characters are repeatedly joined to form the string or not.

brute force:
    two iterators one at end and one at start.
    for the start element we add it into a substring.
    then compare that to the last element if matches then good go one place behind and do the same, untill
    you reach the start iterator.
    if even at one place we face problem we increase the sunbstrin size by 1 and compare again by increased
    substr at start and at end , if the iterators reach the point i<j or have the same value then we return true
    for any other case return false

    time complexity:O(n^2)
    space complexity:O(1)

    
String concatenation:
    lets say we have a string abab. now to check if its repeating pattern we make a new string which
    is double of the original i.e. abababab
    now the analogy is that if a pattern exist in the string its atleast appearing 2 times
    pattern + pattern or p + p
    when we add the string twice the pattern should atleast be p+p + p+p 
    here even if we remove any number of characters from the first p and last p 
    we can still find the original string as in our doubles string as p'+p+p+p' where p' is the changed one
    so keeping in mind that the pattern can be of single character as well we remove 1 character from
    start and from end of the doubled string and then check if it has the original string or not.
    if yes then yes the string follows a repetetive pattern else not.


the current implemented solution is about starting from the center of the string.
and checking if there is a pattern between bot halves
then halving the first half and checking again between the two new halves and the rest of the halves.
keep doing that untill we have reached the length.
if during the halving we find repetition then return true
else return false at the end